%Author: Siddhesh Wani
%Date: March 14, 2016




\documentclass[12pt]{article}
\usepackage{tikz}
\usetikzlibrary{shapes.geometric, arrows}
\usepackage{hyperref}
\usepackage[a4paper]{geometry}
\usepackage[font=small]{caption}
\usepackage{listings}

%DO NOT EDIT start
%Define different shapes to be used in flowchart
\tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm,text centered, draw=black, fill=red!30]
\tikzstyle{io} = [trapezium, trapezium left angle=70, trapezium right angle=110, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=blue!30]
\tikzstyle{process} = [rectangle, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=orange!30]
\tikzstyle{decision} = [diamond, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=green!30]
\tikzstyle{arrow} = [thick,->,>=stealth]
\tikzstyle{connector} = [signal,draw=black,fill=olive!30]%,text width=1cm,text height=1.5cm,align=center]
%DO NOT EDIT end


\begin{document}
\newgeometry{right=1.5cm,left=1.5cm}
 \section{Developer Manual for Scilab2C}
 \textbf{Note:} This section is for developers who seek to contribute to this toolbox. Developers who want to use this toolbox, please see 
 \hyperlink{user_manual}{`User manual for Scilab2C'}.\\
 This section explains the structure of the `Scilab2c' toolbox, lists out coding guidelines and instructions for contributing to code.
 
 \subsection{Structure of the toolbox}
 As a developer you will mostly be doing modifications in `macros', `src' and `tests' folder. `macros' folder contains all scilab scripts used 
 for conversion. These macros are grouped into different folders according to their functionality. `src' folder contains 
 all c files which implement scilab functions in c.
 \subsection{Coding guidelines}
 \hypertarget{coding_guide}
 Please follow following guidelines while doing any modifications in the toolbox.
 \begin{enumerate}
  \item Make new folder in `macros' and `src/c' only when new scilab or c file do not fit into any of the existing folders.
  If new folder is added in `macros' make sure you add file `buildmacros.sce' and add that folder in 'etc/scilab2c.start' also.
  \item Add appropriate comments while writing scilab and c functions.
  \item Naming convention to be followed for c functions is `$<$data\_type$><$function\_name$><$dimension$>$' where dimension can be `s' or `a' for scalar and vector/matrix respectively and
  data type can be one of mentioned in table \ref{tb:types}. \\
  For example, c function names for `sin' function for data type double will be `dsins.c' and `dsina.c' for scalar and matrix respectively.  
  \item Generated c function names follow following name convention\\
  \texttt{$<$inputs\_type\_\&\_dimensions$><$function\_name$><$outputs\_type\_\&\_dimensions$>$}
  where dimensions can be `0' for scalar types and `2' for vector/matrix types of data. Input and output types can be any one 
  of the specified in table \ref{tb:types}\\
  \begin{table}[b]
  \caption{Data types}
  \label{tb:types}
  \centering 
  \begin{tabular}{|c|c|}
   \hline
   Input/Output data type & Representation \\  \hline
   unsigned 8 bit & u8 \\ \hline
   signed 8 bit & i8 \\ \hline
   unsigned 16 bit & u16 \\ \hline
   signed 16 bit & u16 \\ \hline
   real single precision & s \\ \hline
   real double precision & d \\ \hline
   complex single precision & c \\ \hline
   complex double precision & z \\ \hline
   string & g \\ \hline
   
  \end{tabular}
  
  \end{table}
  For example, scilab function `sin (30)', generated c function name will be `d0sind0' as input is of type double and scalar (d0) and 
  output is also of same type and dimensions (d0).
  \item Interface files provide an interface link to generated c name to a corresponding c function in `src' folder.
  For e.g., `\#define s0coss0(in) scoss(in)' links `s0coss0' with c function `scoss'. `s0coss0' is function name generated for 
  cos function using real single precision data as an input and output is of same type. While `scoss' is implementation 
  of cos in c for scalar inputs of type real single precision.  
  \end{enumerate}

  
 \subsection{Instructions for adding new functions}
 \begin{enumerate}
   \item Decide new scilab function for which support for C conversion is to be added.
   \item Run that function with arguements different data types if function supports different data types. Note down the data types supported.
   \item Go to help file of the same function in Scilab and understand its functionality, cases for input/output arguements (like just one input or variable number of
    inputs etc), dependance of functionality on input arguements etc.
   \item Write C code implementing same functionality as provided by selected scilab function. You may require to write multiple functions (in separate files) as with
   some scilab function functionality is different for different number or types of input arguements.
   \item Name of C function and corresponding c file should correspond to types and number of input/output arguements and name of the function. For naming convention, refer 
   \hyperlink{coding_guide}{'Coding guidelines'}. For example, a function with name `functionname' accepting one input arguement of type `double' scalar and giving output 
   of type `double' scalar, corresponding C function name will be `dfunctionnames'.
   \item In `src' folder in toolbox, find suitable folder which contains other functions providing similar functionality. If you think new function does not fit into any of 
   the current folders than only make new folder. Now in selected folder make a new folder with name as that of scilab function name. For example, `functionname' in above case.
   Store c files corresponding to this function in this folder. Make sure you have covered all possiblities of input/output arguements.
   \item Write header and interface files for new function. A header file with name `functionname.h' contains definition of all functions defined in that folder. An interface 
   file contains definition linking function name generated during conversion from scilab to c and functions written in c. For more details about interface files, 
   refer \hyperlink{coding_guide}{`Coding guidelines'}.
   \item Store header file and interface file in folders named `includes' and `interfaces' respectively.
   \item Open `/path/to/toolbox/includes/sci2clib.h' Add name of the header files here also at appropriate position.
   \item Goto folder `macros/findDeps'. Update files `getAllHeaders.sci', `getAllInterfaces.sci', `getAllSources.sci'. You need to add paths of corresponding files in these files.
   \item Open `macros/ToolInitialisation/INIT\_FillSCI2LibCDirs.sci'. This file basically lists out the functions supported by scilab2c. Whenever a new function is added to
   scilab2c toolbox, this file must be updated. Each function atleast contains the following description. Actual description can contain more lines depending on the 
   function. 
   \begin{lstlisting}[breaklines=true,language=Scilab, numbers=left, numbersep=5pt, numberstyle=\small\color{gray}, frame=single ]
    ClassName = 'Sin';

    // --- Class Annotation. ---
    PrintStringInfo('Adding Class:'+ClassName+'.',GeneralReport,'file','y');
    ClassFileName = fullfile(SCI2CLibCAnnClsDir,ClassName+ExtensionCAnnCls);
    PrintStringInfo('NIN= 1',ClassFileName,'file','y');
    PrintStringInfo('NOUT= 1',ClassFileName,'file','y');
    PrintStringInfo('OUT(1).TP= FA_TP_USER',ClassFileName,'file','y');
    PrintStringInfo('OUT(1).SZ(1)= IN(1).SZ(1)',ClassFileName,'file','y');
    PrintStringInfo('OUT(1).SZ(2)= IN(1).SZ(2)',ClassFileName,'file','y');

    // --- Function List Class. ---
    ClassFileName = fullfile(SCI2CLibCFLClsDir,ClassName+ExtensionCFuncListCls);
    PrintStringInfo('s0'+ArgSeparator+'s0',ClassFileName,'file','y');
    
    // --- Annotation Function And Function List Function. ---
    FunctionName = 'sin'; //BJ : Done AS : Float_Done
    PrintStringInfo('      Adding Function: '+FunctionName+'.',GeneralReport,'file','y');
    INIT_GenAnnFLFunctions(FunctionName,SCI2CLibCAnnFunDir,ClassName,GeneralReport,ExtensionCAnnFun);
    INIT_GenAnnFLFunctions(FunctionName,SCI2CLibCFLFunDir,ClassName,GeneralReport,ExtensionCFuncListFun);

  \end{lstlisting}
  Line 1 specifies the name of class. Single class can describe multiple functions if input/output arguemnts types/numbers
  are same for multiple functions.\\
  Line 3,4 and 5 are same for all functions.\\
  Line 6,7 specify number of inputs and outputs respectively. Line 8 specify type of the output. Line 9 and 10 combinely 
  specify the size of output. Refer to other descriptions for filling out these lines.
  If function supports variable number of inputs, add multiple of these 5 lines for each possibility of number of inputs. 
  For e.g., if function can take 1, 2 or 3 input arguments, there will three sets of these lines.
  Line 14 specifies all possible combinations of inputs/outputs for differnet types and numbers.
  Add as much of these lines as required.
  On line 17, insert correct function name. This is same as scilab function name. Add remaining lines as it is.
  \item Run `builder.sce' and `loader.sce' files in main toolbox folder. 
  \item Now write a scilab script which makes use of newly added function and convert it using scilab2c toolbox. Check the results obtained.
  If results are not as desired, modify c files as required and check again. Do it iteratively untill correct results are obtained.
  \end{enumerate}

 
\end{document}
